{"version":3,"file":"build.js","sources":["../src/utils/cell.js","../src/utils/world.js","../src/utils/rng.js","../src/utils/dungeon.js","../src/utils/color.js","../src/utils/alpha.js","../src/utils/image.js","../src/utils/display.js","../src/index.js"],"sourcesContent":["const directions = {\n  LEFT:       [-1,  0],\n  UP_LEFT:    [-1, -1],\n  UP:         [ 0, -1],\n  UP_RIGHT:   [ 1, -1],\n  RIGHT:      [ 1,  0],\n  DOWN_RIGHT: [ 1,  1],\n  DOWN:       [ 0,  1],\n  DOWN_LEFT:  [-1,  1]\n}\nconst { LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT } = directions\nconst cardinalDirections = { LEFT, UP, RIGHT, DOWN }\n\nexport default {\n  directions, cardinalDirections,\n  isCell, isEqual, isEdge, isInside, isNeighbor, toString, fromString, toIndex, fromIndex, getNeighbors, getManhattan, getDistance\n}\n\nfunction isCell(value) {\n  return value && Array.isArray(value) && value.length === 2 && !value.filter(value => isNaN(value) || typeof value !== 'number').length\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return isInside(cell, size) && (x === rectX || x === rectX + rectWidth - 1 || y === rectY || y === rectY + rectHeight - 1)\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction isNeighbor(cell, other) {\n  let [cx, cy] = cell\n  let [ox, oy] = other\n  let dx = Math.abs(ox - cx)\n  let dy = Math.abs(oy - cy)\n  return (!dx || dx === 1) && (!dy || dy === 1)\n}\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!isCell(cell))\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let dirs = cardinalDirections\n  if (diagonals)\n    dirs = directions\n  for (let key in dirs) {\n    let [dx, dy] = dirs[key]\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  let [ax, ay] = a\n  let [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n\nfunction getDistance(a, b, sqrt) {\n  if (typeof sqrt === 'undefined')\n    sqrt = true\n  let [ax, ay] = a\n  let [bx, by] = b\n  let [dx, dy] = [bx - ax, by - ay]\n  let squared  = dx * dx + dy * dy\n  if (sqrt)\n    return Math.sqrt(squared)\n  return squared\n}\n","import { Cell } from './index'\n\nconst tileData = [\n  'floor walkable',\n  'wall opaque',\n  'door opaque door',\n  'doorOpen walkable door',\n  'doorSecret opaque door secret',\n  'entrance walkable stairs',\n  'exit walkable stairs'\n]\n\nconst tiles = function (tileData) {\n  let tiles = []\n  let i = tileData.length\n  while (i--) {\n    let tile = tiles[i] = { type: 'tile', id: i }\n    let [kind, ...props] = tileData[i].split(' ')\n    tile.kind = kind\n    for (let prop of props)\n      tile[prop] = true\n  }\n  return tiles\n}(tileData)\n\nconst tileNames = Object.keys(tiles)\n\nconst tileIds = function (tiles) {\n  let tileIds = {}\n  let i = 0\n  for (let tile of tiles) {\n    let id = tile.kind.split('').reduce((result, char, index) => {\n      let CHAR = char.toUpperCase()\n      if (char === CHAR || !index)\n        result[result.length] = ''\n      result[result.length - 1] += CHAR\n      return result\n    }, []).join('_')\n    tileIds[id] = i\n    i++\n  }\n  return tileIds\n}(tiles)\n\nconst tileCosts = function (tiles) {\n  let tileCosts = []\n  for (let tile of tiles) {\n    let cost = 0\n    if (!tile.walkable && !tile.door)\n      cost = Infinity\n    if (tile.secret)\n      cost = 1000\n    if (tile.door) {\n      cost++\n      if (!tile.walkable)\n        cost++\n    }\n    tileCosts.push(cost)\n  }\n  return tileCosts\n}(tiles)\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = tileIds\n\nexport default {\n  tiles, tileNames, tileIds, tileCosts,\n  create\n}\n\nfunction create(size) {\n\n  let area = size * size\n  let data = new Uint8ClampedArray(area)\n\n  let world = {\n    size, data, elements: new Set, entrance: null, exit: null,\n    getAt, tileAt, elementsAt, setAt, fill, clear, spawn, kill, findPath, findStep\n  }\n\n  return world\n\n  function getAt(cell) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    return data[index]\n  }\n\n  function tileAt(cell) {\n    return tiles[getAt(cell)]\n  }\n\n  function elementsAt(cell) {\n    return [...world.elements].filter(element => Cell.isEqual(cell, element.cell))\n  }\n\n  function setAt(cell, value) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    data[index] = value\n    return value\n  }\n\n  function fill(rect, value) {\n\n    if (!Array.isArray(rect))\n      rect = [0, 0, size, size]\n\n    if (isNaN(value))\n      value = WALL\n\n    let [rectX, rectY, rectWidth, rectHeight] = rect\n\n    let area = rectWidth * rectHeight\n\n    let i = area\n    while (i--) {\n      let [x, y] = Cell.fromIndex(i, rectWidth)\n      let index  = Cell.toIndex([x + rectX, y + rectY], size)\n      data[index] = value\n    }\n\n    return world\n\n  }\n\n  function clear(rect) {\n    return world\n  }\n\n  function spawn(element, cell) {\n    element.world = world\n    element.cell  = cell\n    world.elements.add(element)\n  }\n\n  function kill(element) {\n    return world.elements.delete(element)\n  }\n\n  function findPath(start, goal, costs, diagonals) {\n\n    if (!costs)\n      costs = {}\n\n    if (!costs.tiles)\n      costs.tiles = tileCosts\n\n    if (!costs.cells)\n      costs.cells = {}\n\n    let path = []\n\n    let startKey = start.toString()\n    let goalKey  = goal.toString()\n\n    let opened = [startKey]\n    let closed = {}\n\n    let scores = { f: {}, g: {} }\n    let parent = {}\n\n    let cells = data.map((id, index) => Cell.fromIndex(index, size))\n    for (let cell of cells) {\n      scores.g[cell] = Infinity\n      scores.f[cell] = Infinity\n    }\n\n    scores.g[start] = 0\n    scores.f[start] = Cell.getManhattan(start, goal)\n\n    while (opened.length) {\n      if (opened.length > 1)\n        opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n      let cellKey = opened.pop()\n      let cell = Cell.fromString(cellKey)\n      if (cellKey === goalKey) {\n        let cell = goal\n        do {\n          path.unshift(cell)\n          cell = parent[cell]\n        } while (cell)\n        return path\n      }\n      closed[cell] = true\n      for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n        if (!Cell.isInside(neighbor, size) || neighbor in closed)\n          continue\n        let key = neighbor.toString()\n        let tileCost = costs.tiles[getAt(neighbor)] || 0\n        let cellCost = costs.cells[neighbor] || 0\n        let cost = tileCost + cellCost\n        if (cost === Infinity && key !== goalKey)\n          continue\n        let g = scores.g[cell] + 1 + cost\n        if ( !opened.includes(key) )\n          opened.push(key)\n        else if ( g >= scores.g[neighbor] )\n          continue\n        parent[neighbor] = cell\n        scores.g[neighbor] = g\n        scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n      }\n    }\n\n    return null\n\n  }\n\n  function findStep(path, cell) {\n    if (!path)\n      return null\n    let next, index = 0\n    do {\n      next = path[index++]\n    } while (next && !Cell.isEqual(cell, next))\n    next = path[index]\n    if (!next)\n      return null\n    let [cx, cy] = cell\n    let [nx, ny] = next\n    let step = [nx - cx, ny - cy]\n    return step\n  }\n\n}\n","let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if (isNaN(initialSeed))\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if (!isNaN(min))\n        max = min, min = 0\n      else if (Array.isArray(min))\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor(get() * (max - min)) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if (!isNaN(array))\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[get(array.length)]\n  }\n\n  function seed(newSeed) {\n    if (!isNaN(newSeed))\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","import { RNG, Cell, World } from './index'\n\nconst { FLOOR, WALL } = World.tileIds\n\nlet rng = RNG.create()\n\nexport default { create }\n\nfunction create(size) {\n\n  let area = size * size\n  let center = (size - 1) / 2\n  let world = World.create(size).fill()\n\n  let data = world.data\n\n  let i = area\n  while (i--) {\n    let cell, [x, y] = cell = Cell.fromIndex(i, size)\n    let id = FLOOR\n    if (Cell.isEdge(cell, size) && x !== center && y !== center || x === center && y === center)\n      id = WALL\n    data[i] = id\n  }\n\n  return world\n\n}\n","let canvas  = document.createElement('canvas')\nlet context = canvas.getContext('2d')\n\nexport default { isHex, toHex, toRGB }\n\nfunction isHex(value) {\n  return value[0] === '#' && parseInt(value.slice(1), 16) < 16777215\n}\n\nfunction toHex(color) {\n  if (Array.isArray(color))\n    return '#' + color.map(channel => channel < 16 ? '0' + channel : channel.toString(16)).join('')\n  context.fillStyle = color\n  return context.fillStyle\n}\n\nfunction toRGB(hex) {\n  if (!isHex(hex))\n    hex = toHex(hex)\n  let rgb = []\n  for (let i = 3; i--;)\n    rgb[i] = parseInt(hex.slice(i * 2 + 1, (i + 1) * 2 + 1), 16)\n  return rgb\n}\n","import Color from './color'\n\nexport default { process }\n\nfunction process(images, ...colors) {\n  if (!Array.isArray(images))\n    images = [images]\n  let processed = []\n  for (let image of images) {\n    for (let color of colors)\n      image = processOne(Color.toRGB(color), image)\n    processed.push(image)\n  }\n  if (processed.length === 1)\n    return processed[0]\n  return processed\n}\n\nfunction processOne(key, image) {\n\n  let [red, green, blue] = key\n  let { width, height }  = image\n\n  let canvas = document.createElement('canvas')\n  canvas.width  = width\n  canvas.height = height\n\n  let context = canvas.getContext('2d')\n  context.drawImage(image, 0, 0)\n\n  let imageData = context.getImageData(0, 0, width, height)\n  let data = imageData.data\n\n  let area = width * height\n  for (let i = area; i--;) {\n    let index = i * 4\n    let [r, g, b, a] = data.slice(index, index + 4)\n    if (a && r === red && g === green && b === blue) {\n      data[index]     = 0\n      data[index + 1] = 0\n      data[index + 2] = 0\n      data[index + 3] = 0\n    }\n  }\n\n  context.putImageData(imageData, 0, 0)\n\n  return canvas\n\n}\n","let regex = /^\\/?(?:.+\\/)*(.+)\\./\n\nexport default { load }\n\nfunction load(paths, callback) {\n  if (!callback)\n    return\n  if (!Array.isArray(paths))\n    return loadOne(paths, callback)\n  let images = []\n  let index  = 0\n  let max    = paths.length\n  let path   = paths[index]\n  let loaded = [path]\n  function next(image) {\n    let id = regex.exec(path)[1]\n    if (!images[id])\n      images[id] = image\n    else\n      images[id] = [images[id], image]\n    images[index++] = image\n    if (index >= max)\n      return callback(images)\n    path = paths[index]\n    loadOne(path, next)\n  }\n  loadOne(path, next)\n}\n\nfunction loadOne(path, callback) {\n  if (!callback)\n    return\n  let image = new Image\n  image.src = path\n  image.onload = function () {\n    callback(image)\n  }\n}\n","export default { create }\n\nfunction create(size) {\n\n  let [width, height] = size\n\n  let canvas  = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  let context = canvas.getContext('2d')\n\n  return {\n    width, height, context,\n    mount, clear, render\n  }\n\n  function mount(element) {\n    if (typeof element === 'string')\n      element = document.querySelector(element)\n    if (!element)\n      throw new TypeError(`Cannot mount display on element ${element}`)\n    element.appendChild(canvas)\n    clear()\n  }\n\n  function clear() {\n    context.fillStyle = 'black'\n    context.fillRect(0, 0, width, height)\n  }\n\n  function render() {\n\n  }\n\n}\n","import { Cell, World, Dungeon, Alpha, Image, Display } from './utils/index'\n\nconst WORLD_SIZE = 9\n\nconst { FLOOR, WALL } = World.tileIds\n\nlet display = Display.create([320, 240])\nlet world = Dungeon.create(WORLD_SIZE)\n\nImage.load(['floor.png', 'wall.png', 'shadow.png'], setup)\n\nfunction setup(sprites) {\n  display.mount('#app')\n\n  let [floor, wall, shadow] = sprites = Alpha.process(sprites, 'magenta')\n\n  let sprite = floor\n\n  let size = WORLD_SIZE\n  let area = size * size\n\n  for (let i = 0; i < area; i++) {\n\n    let cell, [cx, cy] = cell = Cell.fromIndex(i, size)\n    let id = world.data[i]\n    let sprite = sprites[id]\n\n    let elevation = getIsoElevation(sprite)\n    let [x, y] = getIsoPos(cell, sprite.width)\n\n    x += display.width  / 2\n    y += display.height / 2 - (size / 2 + elevation) * sprite.width / 2\n\n    display.context.drawImage(sprite, x, y)\n    if (id === FLOOR && world.getAt([cx - 1, cy]) === WALL)\n      display.context.drawImage(shadow, x, y)\n\n  }\n\n  loop()\n\n}\n\nfunction loop() {\n\n}\n\nfunction getIsoPos(cell, tileSize) {\n  let [x, y] = cell\n  return [ (x - y - 1) * tileSize / 2, (x + y) * tileSize / 4 ]\n}\n\nfunction getIsoElevation(sprite) {\n   return (sprite.height - sprite.width / 2) / (sprite.width / 2)\n}\n"],"names":["directions","LEFT","UP","RIGHT","DOWN","cardinalDirections","isEqual","isEdge","isInside","isNeighbor","toString","fromString","toIndex","fromIndex","getNeighbors","getManhattan","getDistance","isCell","value","Array","isArray","length","filter","isNaN","a","b","cell","size","x","y","rect","rectX","rectY","rectWidth","rectHeight","other","cx","cy","ox","oy","dx","Math","abs","dy","string","split","map","Number","index","diagonals","step","TypeError","neighbors","dirs","key","current","push","ax","ay","bx","by","sqrt","squared","tileData","tiles","i","tile","type","id","kind","props","prop","tileNames","Object","keys","tileIds","reduce","result","char","CHAR","toUpperCase","join","tileCosts","cost","walkable","door","Infinity","secret","FLOOR","WALL","create","area","data","Uint8ClampedArray","world","elements","Set","entrance","exit","tileAt","elementsAt","setAt","fill","clear","spawn","kill","findPath","findStep","getAt","Cell","element","add","delete","start","goal","costs","cells","path","startKey","goalKey","opened","closed","scores","f","g","parent","sort","cellKey","pop","unshift","neighbor","tileCost","cellCost","includes","next","nx","ny","RNG","initialSeed","random","currentSeed","get","choose","seed","min","max","arguments","sin","floor","array","newSeed","World","rng","center","canvas","document","createElement","context","getContext","isHex","toHex","toRGB","parseInt","slice","color","channel","fillStyle","hex","rgb","process","images","processed","colors","image","processOne","Color","red","green","blue","width","height","drawImage","imageData","getImageData","r","putImageData","regex","load","paths","callback","loadOne","loaded","exec","Image","src","onload","render","mount","querySelector","appendChild","fillRect","WORLD_SIZE","display","Display","Dungeon","setup","sprites","Alpha","wall","shadow","sprite","elevation","getIsoElevation","getIsoPos","loop","tileSize"],"mappings":"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"}